module workflow.generate_warp


import org.eclipse.emf.mwe.utils.*
import org.nanosite.simbench.simo.generator.*

//var modelPath  // = "platform:/resource/org.nanosite.sys.interplay.viz.dot/src/org/nanosite/sys/interplay/viz/dot/generator/model.interplay"
//var modelPath = "platform:/resource/org.nanosite.simbench.simo.examples/simple/example01.smd"
//var modelPath = "file://Users/birken/Documents/pgm/simbench/github_simbench/examples/org.nanosite.simbench.simo.examples/simple/example01.hbsim"
//var modelPath = "/Users/birken/Documents/pgm/simbench/github_simbench/examples/org.nanosite.simbench.simo.examples/simple/example01.smd"
var modelPath = "/Users/birken/Documents/pgm/simbench/github_simbench/examples/org.nanosite.simbench.simo.examples/simple"

//var srcGenPathRel
var srcGenPathAbs = "/Users/birken/Documents/pgm/simbench/github_simbench/examples/org.nanosite.simbench.simo.examples/src-gen"

var inputSlot = "model"

//var targetDir = "src-gen"
//var fileEncoding = "Cp1252"



Workflow {
	// initial setup for the Generator
	bean = StandaloneSetup {
//		platformUri = "../.."
//		scanClassPath = true

		registerGeneratedEPackage = "org.nanosite.feamo.feaMo.FeaMoPackage"
		registerGeneratedEPackage = "org.nanosite.simbench.simo.simModel.SimModelPackage"
	}
	
//	component = warp.WarpGeneratorSupport {}

	// read in the smd model
	component = org.eclipse.xtext.mwe.Reader {
		register = org.nanosite.feamo.FeaMoStandaloneSetup {}
		register = warp.WarpGeneratorSetup {}
		
		path = modelPath

		uriFilter = org.eclipse.xtext.mwe.NameBasedFilter {
			extension = "smd"
		}
		
		loadResource = {
			slot = inputSlot
		}
	}

	// call the generator	
	component = org.eclipse.xtext.generator.GeneratorComponent {
		register = warp.WarpGeneratorSetup {}

		slot = inputSlot

		outlet = {
			path = "${srcGenPathAbs}"
		}
	}
}
