«IMPORT hbsim»
«EXTENSION templates::helpers»
«EXTENSION templates::hbsim::Extensions»
«EXTENSION templates::chronsim::chronsim»

«DEFINE iprFile(String targetPath, String genPath) FOR Model»
«LET "Harman_Simbench_Model" AS pname»
  «FILE "model_gen.ipr"-»
<?xml version='1.0' ?>
<cs2:chronsimproject xmlns:cs2="http://www.inchron.com/chronSim_2_0.xsd" xsi:schemaLocation="http://www.inchron.com/chronSim_2_0.xsd" version="1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
		<general>
			<dir>C:\</dir>
			<savedir>C:\</savedir>
			<name>«pname»</name>
			<version>1.1</version>
			<description>
			«EXPAND ProjectDescription(targetPath) FOR this»
			</description>
			<last-modified>2012-03-20T14:14:14</last-modified>
			<author>automatically generated</author>
			<email>klaus.birken@harman.com</email>
			<creator build="20120206A" version="2.4.0" />
			<omitdiagrams stack="true" callnesting="true" />
		</general>
		<toolsettings/>
		<specification>
		«FOREACH getAllCPUs() AS cpu-»
			«EXPAND FileDef(genPath, true) FOR cpu.name-»
		«ENDFOREACH-»
		«FOREACH getAllResources() AS res-»
			«EXPAND FileDef(genPath, false) FOR res.shortName-»
		«ENDFOREACH-»
		«FOREACH getAllCPUs() AS cpu-»
			«EXPAND ProcessDef(pname, genPath, cpu.name, 900, 1) FOR "initModel_"+cpu.name-»
			«EXPAND ProcessDef(pname, genPath, cpu.name, 500, 0) FOR "System_"+cpu.name-»
		«ENDFOREACH-»
		«FOREACH getAllFunctionBlocks() AS fb-»
		«FOREACH fb.getTaskgroups(this) AS tg-»
			«EXPAND ProcessDef(pname, genPath, fb.getCPU(this).name, 500, 0) FOR fb.funcName(tg)-»
		«ENDFOREACH-»
		«ENDFOREACH-»
		«FOREACH getAllFunctionBlocks() AS fb-»
			«FOREACH fb.getReachableBehaviours(this).plan.getResources(main.config).toSet() AS res-»
				«EXPAND ProcessDef(pname, genPath, res.shortName, 500, 1) FOR fb.id()+"_"+res.shortName-»
			«ENDFOREACH-»
		«ENDFOREACH-»
			<includepath>$INSTALL\lib</includepath>
			<options cc="none" rtos="none" warn="1" additionalcflags="" std="none" PrependSpecSettingsFlag="0" />
		</specification>
		<allocation exactness="10" >
			«FOREACH getAllCPUs() AS cpu-»
			«EXPAND AllocationDef(genPath, "10.101 ns", "4.000 ms", "time-slice", true) FOR cpu.name-»
			«ENDFOREACH-»
			«FOREACH getAllResources() AS res-»
			«EXPAND AllocationDef(genPath, "10.000 ns", "10.000 ms", "run-to-completi", false) FOR res.shortName-»
			«ENDFOREACH-»
		</allocation>
		<mapping>
			«FOREACH getAllCPUs() AS cpu-»
				«EXPAND Mapping(pname, cpu.name) FOR "initModel_"+cpu.name-»
				«EXPAND Mapping(pname, cpu.name) FOR "System_"+cpu.name-»
			«ENDFOREACH-»
			«FOREACH main.partitioning.getMappings(main.config) AS m-»
				«IF getAllFunctionBlocks().contains(m.fb)-»
					«FOREACH m.fb.getTaskgroups(this) AS tg-»
					«EXPAND Mapping(pname, m.cpu.name) FOR m.fb.funcName(tg)-»
					«ENDFOREACH-»
				«ENDIF-»
			«ENDFOREACH-»
			«FOREACH getAllFunctionBlocks() AS fb-»
				«FOREACH fb.getReachableBehaviours(this).plan.getResources(main.config).toSet() AS res-»
					«EXPAND Mapping(pname, res.shortName) FOR fb.id()+"_"+res.shortName-»
				«ENDFOREACH-»
			«ENDFOREACH-»
		</mapping>
		<estimationoverride>
		</estimationoverride>
		<clockcounter>
			«FOREACH getAllCPUs() AS cpu-»
			<clock gran_unit="ns" range_value="1" start_unit="ps" gran_value="10.101" drift_value="0" range_unit="s" id="/«cpu.name»/«cpu.name»/«cpu.name»" start_value="0" />
			«ENDFOREACH-»
			«FOREACH getAllResources() AS res-»
			<clock gran_unit="ns" range_value="1" start_unit="ps" gran_value="10" drift_value="0" range_unit="s" id="/«res.shortName»/«res.shortName»/«res.shortName»" start_value="0" />
			«ENDFOREACH-»
		</clockcounter>
		<requirements>
			<rtos_fail enabled="1"/>
		</requirements>
		<stimulation/>
		<communication/>
		<synchronization/>
		<dependencygraph/>
	</cs2:chronsimproject>

  «ENDFILE»

«FILE "milestones.txt"-»
«FOREACH this.getAllFunctionBlocks().getReachableBehaviours(this).plan.step AS step-»
«IF (step.getFB().name == "MilestoneCollector") && (step.name == "ready")-»
«FOREACH step.getPreconditions(main.config).ref.bind(main.config) AS ref-»
«ref.fb.id()»::«ref.step.id()»
«ENDFOREACH-»
«ENDIF-»
«ENDFOREACH»
«ENDFILE»
«ENDLET»
«ENDDEFINE»


«DEFINE ProjectDescription(String targetPath) FOR Model-»
This file has been generated by SIMBENCH.

---

MODEL:
Scenario:     «this.main.scenario.name»
Partitioning: «this.main.partitioning.name»
Use cases:
«FOREACH this.main.scenario.usecase AS uc-»
   «uc.name»
«ENDFOREACH-»

STATISTICS:
CPUs:            «this.getAllCPUs().size»
Resources:       «this.getAllResources().size»
Function blocks: «this.getAllFunctionBlocks().size»
Behaviours:      «this.getAllFunctionBlocks().getReachableBehaviours(this).size»

---

2012, Harman/Becker Automotive Systems
«ENDDEFINE»

«DEFINE AllocationDef(String path, String clockPeriod, String timeslice, String schedType, boolean withInclude) FOR String-»
			<resourcetype library="$INSTALL/models/generic-clib.ism" type="generic-clib" name="«this»" >
				<clock period="«clockPeriod»" />
				<rtos>
					<processes exclusive="false" preemptFlag="true" exactness="10" isrFlag="true" maximum="99" />
					<stack default="1024" />
					<scheduler strategy="Round-Robin" offset="0" cycle="0" period="0" blockingtime="0" order="0" priority="0" type="«schedType»" jitter="0" wcet="0" timeslice="«timeslice»" name="DefaultScheduler" slot="0" bcet="0" />
				</rtos>
				<compiler path="" optimization="0" type="" />
				<instance name="«this»">
					«EXPAND FileDef(path, withInclude) FOR this-»
					<segmentmap>
						<segment flags="0x122" base="0x1000000" size="0x0" sections="data:bss:.bss:stack:heap" pages="1" name="ram" />
						<segment flags="0x113" base="0x2000000" size="0x0" sections="text" pages="1" name="rom" />
						<segment flags="0x12a" base="0x1000" size="0x1000" sections="" sharedMem="shm" pages="1" name="shm" />
					</segmentmap>
					<options cc="none" rtos="none" warn="1" additionalcflags="" std="none" PrependSpecSettingsFlag="0" />
				</instance>
			</resourcetype>
«ENDDEFINE»


«DEFINE FileDef(String path, boolean withInclude) FOR String-»
				<file>
					<name>«path.toBackslash()»\«this».c</name>
					«IF withInclude-»
					<includepath>$PROJECT</includepath>
					«ENDIF-»
					<options cc="none" rtos="none" warn="1" additionalcflags="" std="none" PrependSpecSettingsFlag="0" />
				</file>
«ENDDEFINE»


«DEFINE ProcessDef(String pname, String path, String cpu, Integer prio, Integer init) FOR String-»
			<process isr="0" func="«this»" file="«path.toBackslash()»\«cpu».c" max="1" name="«this»" preemptable="1" stack_limit="1024" init="«init»" >
				<instance offset="0" cycle="0" period="0" blockingtime="0" order="0" priority="«prio»" jitter="0" wcet="0" name="|P:«pname»|RI:«cpu»|SI:DefaultScheduler|SI:«this»" slot="0" bcet="0" >
					<simulationreplacement loadtype="Wcet" mean="0 ps" sigma="0 ps" />
				</instance>
				<entryfunction>|P:«pname»|RI:«cpu»|TU:«path.toBackslash()»\«cpu».c|Fkt:«this»</entryfunction>
			</process>
«ENDDEFINE»


«DEFINE Mapping(String pname, String resource) FOR String-»
			<map>
         		<source>|P:«pname»|RI:«resource»|SI:DefaultScheduler|SI:«this»</source>
				<target>/«resource»/«resource»</target>
			</map>
«ENDDEFINE»

