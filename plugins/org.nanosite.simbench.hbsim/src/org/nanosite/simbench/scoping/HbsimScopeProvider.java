/*
 * generated by Xtext
 */
package org.nanosite.simbench.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import com.google.common.collect.Lists;
import org.nanosite.simbench.hbsim.Behaviour;
import org.nanosite.simbench.hbsim.ResourceInterfaceRef;
import org.nanosite.simbench.hbsim.StepRef;
import org.nanosite.simbench.hbsim.TriggerCall;

/**
 * This class contains custom scoping description.
 *
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it
 *
 */
public class HbsimScopeProvider extends AbstractDeclarativeScopeProvider {

//	public IScope scope_Action_normalizer(Action action, EReference ref) {
//		return Scopes.scopeFor(action.getCpu().getNormalizer());
//	}

	public IScope scope_StepRef_step(StepRef sr, EReference ref) {
		final List<EObject> scopes = Lists.newArrayListWithExpectedSize(20);
		for(Behaviour b : sr.getFb().getBehaviour()) {
			scopes.addAll(b.getPlan().getStep());
		}
		return Scopes.scopeFor(scopes);
	}

	public IScope scope_ResourceInterfaceRef_interface(ResourceInterfaceRef rir, EReference ref) {
		return Scopes.scopeFor(rir.getResource().getInterface());
	}

	public IScope scope_TriggerCall_trigger(TriggerCall tr, EReference ref) {
		final List<EObject> scopes = Lists.newArrayListWithExpectedSize(20);
		for(Behaviour b : tr.getFb().getBehaviour()) {
			scopes.add(b);
			if (b.getRepeat()!=null && b.getRepeat().getUntil()!=null) {
				scopes.add(b.getRepeat().getUntil());
			}
		}
		return Scopes.scopeFor(scopes);
	}

	/*
	public IScope scope_FunctionBlock(FunctionBlock fb, EClass clazz) {
		EList<Step> steps = fb.getPlan().getStep();
		final List<IScopedElement> scopes = new ArrayList<IScopedElement>(10);
		for (Iterator<Step> i= steps.iterator(); i.hasNext();) {
			Step s = (Step)i.next();
			scopes.add(ScopedElement.create(s.getName(), s));
		}
		return new SimpleScope(IScope.NULLSCOPE, scopes);
	}
	*/

	/*
	private IScope createStepsScope(FunctionBlock fb) {
		return new SimpleScope(IScope.NULLSCOPE,
				CollectionUtils.map(fb.getPlan().getStep(),
						new Function<Step, IScopedElement>() {
							//public IScopedElement exec(Step step) {
							//	return ScopedElement.create(step.getName(), step);
							//}
						}
				)
		);
	}
	*/
}
